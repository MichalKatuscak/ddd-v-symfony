{% extends 'base.html.twig' %}

{% block title %}Případová studie: Implementace DDD v Symfony | DDD Symfony{% endblock %}

{% block meta_description %}Detailní případová studie implementace Domain-Driven Design v Symfony 7 na kompletním projektu. Sledujte celý proces od analýzy domény přes návrh až po implementaci s využitím DDD principů.{% endblock %}

{% block meta_keywords %}případová studie DDD, Symfony projekt, kompletní implementace, analýza domény, návrh, vývoj, testování, reálný projekt, DDD v praxi{% endblock %}

{% block body %}
    <h2>Případová studie</h2>

    <div class="table-of-contents mb-4">
        <h5>Obsah kapitoly:</h5>
        <ul>
            <li><a href="#introduction">Úvod</a></li>
            <li><a href="#requirements">Požadavky</a></li>
            <li><a href="#architecture">Architektura</a></li>
            <li><a href="#implementation">Implementace</a></li>
            <li><a href="#lessons">Ponaučení</a></li>
        </ul>
    </div>

    <h3 id="introduction">Úvod</h3>
    <p>
        V této případové studii se podíváme na implementaci systému pro správu projektů pomocí Domain-Driven Design a CQRS v Symfony 7.
        Systém umožňuje uživatelům vytvářet projekty, přidávat úkoly, přiřazovat úkoly členům týmu a sledovat jejich stav.
        Tato případová studie demonstruje praktické použití DDD principů v reálném projektu, s důrazem na správnou implementaci strategických a taktických vzorů.
    </p>

    <h3 id="requirements">Požadavky</h3>
    <p>
        Systém pro správu projektů má následující požadavky:
    </p>

    <ul>
        <li>Uživatelé se mohou registrovat a přihlašovat.</li>
        <li>Uživatelé mohou vytvářet projekty.</li>
        <li>Uživatelé mohou přidávat úkoly do projektů.</li>
        <li>Uživatelé mohou přiřazovat úkoly členům týmu.</li>
        <li>Uživatelé mohou měnit stav úkolů (To Do, In Progress, Done).</li>
        <li>Uživatelé mohou přidávat komentáře k úkolům.</li>
        <li>Uživatelé mohou sledovat aktivitu na projektech a úkolech.</li>
        <li>Systém musí být škálovatelný a udržitelný.</li>
    </ul>

    <h3 id="architecture">Architektura</h3>
    <p>
        Pro implementaci systému pro správu projektů jsme zvolili kombinaci strategického a taktického DDD s CQRS architekturou v Symfony 7.
        Na strategické úrovni jsme identifikovali klíčové bounded contexts a jejich vzájemné vztahy. Na taktické úrovni jsme implementovali doménové modely, agregáty, hodnotové objekty a doménové služby.
        Pro organizaci kódu jsme zvolili vertikální slice architekturu (horizontální DDD), která nám umožňuje organizovat kód podle funkcí (features) místo technických vrstev, což vede k lepší modularitě a udržitelnosti.
    </p>

    <h4>Strategický design: Bounded Contexts a Context Map</h4>
    <p>
        Prvním krokem při implementaci DDD bylo identifikovat bounded contexts (ohraničené kontexty) a vytvořit context map (mapu kontextů), která definuje vztahy mezi nimi.
        Systém je rozdělen do následujících bounded contexts:
    </p>

    <ul>
        <li><strong>UserManagement</strong> - Správa uživatelů, registrace, autentizace. Tento kontext obsahuje vše, co souvisí s identitou a přístupovými právy uživatelů.</li>
        <li><strong>ProjectManagement</strong> - Správa projektů, vytváření, aktualizace. Tento kontext se zaměřuje na životní cyklus projektů a jejich vlastnosti.</li>
        <li><strong>TaskManagement</strong> - Správa úkolů, vytváření, aktualizace, přiřazování. Tento kontext řeší vše, co souvisí s úkoly v rámci projektů.</li>
        <li><strong>CommentManagement</strong> - Správa komentářů, přidávání, aktualizace. Tento kontext se zabývá komunikací a zpětnou vazbou k úkolům.</li>
        <li><strong>ActivityTracking</strong> - Sledování aktivity, zaznamenávání událostí. Tento kontext poskytuje přehled o aktivitách v systému.</li>
    </ul>

    <p>
        Mezi těmito kontexty jsme definovali následující vztahy:
    </p>

    <ul>
        <li><strong>UserManagement ⟷ ProjectManagement</strong>: Vztah typu Partnership, kde oba kontexty spolupracují na správě členství uživatelů v projektech.</li>
        <li><strong>ProjectManagement ⟷ TaskManagement</strong>: Vztah typu Customer-Supplier, kde ProjectManagement je zákazníkem a TaskManagement dodavatelem služeb pro správu úkolů v rámci projektů.</li>
        <li><strong>TaskManagement ⟷ CommentManagement</strong>: Vztah typu Customer-Supplier, kde TaskManagement je zákazníkem a CommentManagement dodavatelem služeb pro komentáře k úkolům.</li>
        <li><strong>ActivityTracking</strong>: Vztah typu Conformist ke všem ostatním kontextům, kde ActivityTracking přijímá události z ostatních kontextů a zaznamenává je.</li>
    </ul>

    <p>
        Pro komunikaci mezi kontexty jsme implementovali Anti-Corruption Layer (ACL) tam, kde bylo potřeba překládat koncepty mezi různými kontexty, a použili jsme doménové události pro asynchronní komunikaci.
    </p>

    <h4>Taktický design a struktura projektu</h4>
    <p>
        Na taktické úrovni jsme implementovali následující DDD vzory:
    </p>

    <ul>
        <li><strong>Entity</strong> - Objekty s identitou, které se v průběhu času mění (např. User, Project, Task).</li>
        <li><strong>Value Objects</strong> - Neměnné objekty bez identity, které reprezentují koncepty v doméně (např. UserId, ProjectId, TaskStatus).</li>
        <li><strong>Aggregates</strong> - Shluky objektů, které jsou považovány za jednu jednotku z hlediska změn dat (např. Project s TaskCollection).</li>
        <li><strong>Domain Events</strong> - Události, které nastávají v doméně a mají význam pro doménové experty (např. ProjectCreated, TaskAssigned).</li>
        <li><strong>Repositories</strong> - Objekty, které zapouzdřují přístup k persistenci agregátů (např. ProjectRepository, TaskRepository).</li>
        <li><strong>Domain Services</strong> - Služby, které implementují doménovou logiku, která nepatří do žádné entity nebo hodnotového objektu (např. TaskAssignmentService).</li>
    </ul>

    <p>
        Struktura projektu odráží jak strategický, tak taktický design DDD. Níže je ukázka správné struktury projektu, kde každý bounded context má svou vlastní doménovou vrstvu, infrastrukturu a aplikační služby:
    </p>
    <pre><code class="language-bash">src/
├── UserManagement/            # Bounded Context: Správa uživatelů
│   ├── Domain/                # Doménová vrstva
│   │   ├── Model/             # Doménové modely
│   │   │   └── User.php        # Entita uživatele
│   │   ├── ValueObject/       # Hodnotové objekty
│   │   │   ├── UserId.php      # Identifikátor uživatele
│   │   │   └── Email.php       # Email uživatele
│   │   ├── Event/             # Doménové události
│   │   │   └── UserRegistered.php  # Událost registrace uživatele
│   │   └── Repository/        # Repozitáře (rozhraní)
│   │       └── UserRepository.php  # Rozhraní pro práci s uživateli
│   ├── Infrastructure/        # Infrastrukturní vrstva
│   │   └── Repository/        # Implementace repozitářů
│   │       └── DoctrineUserRepository.php  # Doctrine implementace
│   ├── Application/          # Aplikační vrstva
│   │   ├── Command/           # Příkazy
│   │   │   ├── RegisterUser.php  # Příkaz pro registraci uživatele
│   │   │   └── RegisterUserHandler.php  # Handler příkazu
│   │   └── Query/             # Dotazy
│   │       ├── GetUser.php      # Dotaz pro získání uživatele
│   │       └── GetUserHandler.php  # Handler dotazu
│   └── Presentation/         # Prezentační vrstva
│       ├── Controller/        # Kontrolery
│       │   ├── RegistrationController.php  # Kontroler pro registraci
│       │   └── SecurityController.php  # Kontroler pro autentizaci
│       └── ViewModel/         # View modely
│           └── UserViewModel.php  # View model uživatele
├── ProjectManagement/         # Bounded Context: Správa projektů
│   ├── Domain/                # Doménová vrstva
│   │   ├── Model/             # Doménové modely
│   │   │   ├── Project.php     # Entita projektu (Aggregate Root)
│   │   │   └── ProjectMember.php  # Entita člena projektu
│   │   ├── ValueObject/       # Hodnotové objekty
│   │   │   ├── ProjectId.php    # Identifikátor projektu
│   │   │   └── ProjectStatus.php  # Status projektu
│   │   ├── Event/             # Doménové události
│   │   │   ├── ProjectCreated.php  # Událost vytvoření projektu
│   │   │   └── MemberAdded.php  # Událost přidání člena
│   │   └── Repository/        # Repozitáře (rozhraní)
│   │       └── ProjectRepository.php  # Rozhraní pro práci s projekty
│   ├── Infrastructure/        # Infrastrukturní vrstva
│   │   └── Repository/        # Implementace repozitářů
│   │       └── DoctrineProjectRepository.php  # Doctrine implementace
│   ├── Application/          # Aplikační vrstva
│   │   ├── Command/           # Příkazy
│   │   │   ├── CreateProject.php  # Příkaz pro vytvoření projektu
│   │   │   └── CreateProjectHandler.php  # Handler příkazu
│   │   └── Query/             # Dotazy
│   │       ├── GetProjects.php  # Dotaz pro získání projektů
│   │       └── GetProjectsHandler.php  # Handler dotazu
│   └── Presentation/         # Prezentační vrstva
│       ├── Controller/        # Kontrolery
│       │   ├── ProjectController.php  # Kontroler pro vytvoření projektu
│       │   └── ProjectsController.php  # Kontroler pro seznam projektů
│       └── ViewModel/         # View modely
│           └── ProjectViewModel.php  # View model projektu
├── TaskManagement/            # Bounded Context: Správa úkolů
│   ├── Domain/                # Doménová vrstva
│   │   ├── Model/             # Doménové modely
│   │   │   └── Task.php        # Entita úkolu (Aggregate Root)
│   │   ├── ValueObject/       # Hodnotové objekty
│   │   │   ├── TaskId.php      # Identifikátor úkolu
│   │   │   └── TaskStatus.php  # Status úkolu
│   │   ├── Event/             # Doménové události
│   │   │   ├── TaskCreated.php  # Událost vytvoření úkolu
│   │   │   ├── TaskAssigned.php  # Událost přiřazení úkolu
│   │   │   └── TaskStatusChanged.php  # Událost změny stavu
│   │   ├── Service/           # Doménové služby
│   │   │   └── TaskAssignmentService.php  # Služba pro přiřazení úkolu
│   │   └── Repository/        # Repozitáře (rozhraní)
│   │       └── TaskRepository.php  # Rozhraní pro práci s úkoly
│   ├── Infrastructure/        # Infrastrukturní vrstva
│   │   └── Repository/        # Implementace repozitářů
│   │       └── DoctrineTaskRepository.php  # Doctrine implementace
│   ├── Application/          # Aplikační vrstva
│   │   ├── Command/           # Příkazy
│   │   │   ├── CreateTask.php   # Příkaz pro vytvoření úkolu
│   │   │   ├── CreateTaskHandler.php  # Handler příkazu
│   │   │   ├── AssignTask.php   # Příkaz pro přiřazení úkolu
│   │   │   ├── AssignTaskHandler.php  # Handler příkazu
│   │   │   ├── ChangeTaskStatus.php  # Příkaz pro změnu stavu
│   │   │   └── ChangeTaskStatusHandler.php  # Handler příkazu
│   │   └── Query/             # Dotazy
│   │       ├── GetTask.php      # Dotaz pro získání úkolu
│   │       └── GetTaskHandler.php  # Handler dotazu
│   └── Presentation/         # Prezentační vrstva
│       └── Controller/        # Kontrolery
│           ├── TaskController.php  # Kontroler pro úkoly
│           ├── AssignController.php  # Kontroler pro přiřazení
│           └── StatusController.php  # Kontroler pro změnu stavu
├── CommentManagement/         # Bounded Context: Správa komentářů
│   ├── Domain/                # Doménová vrstva
│   │   ├── Model/             # Doménové modely
│   │   │   └── Comment.php     # Entita komentáře
│   │   ├── ValueObject/       # Hodnotové objekty
│   │   │   └── CommentId.php   # Identifikátor komentáře
│   │   ├── Event/             # Doménové události
│   │   │   └── CommentAdded.php  # Událost přidání komentáře
│   │   └── Repository/        # Repozitáře (rozhraní)
│   │       └── CommentRepository.php  # Rozhraní pro práci s komentáři
│   ├── Infrastructure/        # Infrastrukturní vrstva
│   │   └── Repository/        # Implementace repozitářů
│   │       └── DoctrineCommentRepository.php  # Doctrine implementace
│   ├── Application/          # Aplikační vrstva
│   │   └── Command/           # Příkazy
│   │       ├── AddComment.php   # Příkaz pro přidání komentáře
│   │       └── AddCommentHandler.php  # Handler příkazu
│   └── Presentation/         # Prezentační vrstva
│       └── Controller/        # Kontrolery
│           └── CommentController.php  # Kontroler pro komentáře
├── ActivityTracking/          # Bounded Context: Sledování aktivity
│   ├── Domain/                # Doménová vrstva
│   │   ├── Model/             # Doménové modely
│   │   │   └── Activity.php    # Entita aktivity
│   │   ├── ValueObject/       # Hodnotové objekty
│   │   │   └── ActivityId.php  # Identifikátor aktivity
│   │   └── Repository/        # Repozitáře (rozhraní)
│   │       └── ActivityRepository.php  # Rozhraní pro práci s aktivitami
│   ├── Infrastructure/        # Infrastrukturní vrstva
│   │   └── Repository/        # Implementace repozitářů
│   │       └── DoctrineActivityRepository.php  # Doctrine implementace
│   ├── Application/          # Aplikační vrstva
│   │   └── Command/           # Příkazy
│   │       ├── RecordActivity.php  # Příkaz pro zaznamenání aktivity
│   │       └── RecordActivityHandler.php  # Handler příkazu
│   └── Presentation/         # Prezentační vrstva
│       └── Controller/        # Kontrolery
│           └── ActivityController.php  # Kontroler pro aktivity
└── Shared/                    # Sdílené komponenty
    ├── Domain/                # Sdílená doménová logika
    │   ├── Exception/         # Výjimky
    │   │   └── DomainException.php  # Základní doménová výjimka
    │   └── Bus/               # Rozhraní pro message bus
    │       ├── CommandBus.php   # Rozhraní pro command bus
    │       └── QueryBus.php     # Rozhraní pro query bus
    └── Infrastructure/        # Sdílená infrastruktura
        ├── Bus/               # Implementace message bus
        │   ├── MessengerCommandBus.php  # Implementace command bus
        │   └── MessengerQueryBus.php  # Implementace query bus
        └── Persistence/        # Sdílená persistence
            └── DoctrineTypes/    # Vlastní Doctrine typy
                └── UuidType.php    # Typ pro UUID</code></pre>

    <h3 id="implementation">Implementace</h3>
    <p>
        Nyní se podíváme na implementaci některých klíčových částí systému, s důrazem na správnou aplikaci DDD principů.
    </p>

    <h4>Ubiquitous Language</h4>
    <p>
        Před zahájením implementace jsme vytvořili Ubiquitous Language (všudypřítomný jazyk) ve spolupráci s doménovými experty. Tento jazyk je používán konzistentně v kódu, dokumentaci a komunikaci. Například:
    </p>

    <ul>
        <li><strong>Project</strong> - Organizační jednotka, která sdružuje související úkoly a členy týmu.</li>
        <li><strong>Task</strong> - Jednotka práce, která má být dokončena v rámci projektu.</li>
        <li><strong>Assignee</strong> - Člen týmu, kterému je přiřazen úkol.</li>
        <li><strong>Status</strong> - Stav úkolu (To Do, In Progress, Done).</li>
        <li><strong>Comment</strong> - Textová zpětná vazba k úkolu.</li>
        <li><strong>Activity</strong> - Záznam o akci provedené v systému.</li>
    </ul>

    <h4>Doménový model: Projekt (Aggregate Root)</h4>
    <pre><code class="language-php">&lt;?php

namespace App\ProjectManagement\Domain\Model;

use App\ProjectManagement\Domain\Event\ProjectCreated;
use App\ProjectManagement\Domain\ValueObject\ProjectId;
use App\UserManagement\Domain\ValueObject\UserId;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity]
#[ORM\Table(name: 'projects')]
class Project
{
    #[ORM\Id]
    #[ORM\Column(type: 'string', length: 36)]
    private string $id;

    #[ORM\Column(type: 'string', length: 255)]
    private string $name;

    #[ORM\Column(type: 'text', nullable: true)]
    private ?string $description;

    #[ORM\Column(type: 'string', length: 36)]
    private string $ownerId;

    #[ORM\Column(type: 'json')]
    private array $memberIds = [];

    #[ORM\Column(type: 'datetime_immutable')]
    private \DateTimeImmutable $createdAt;

    #[ORM\Column(type: 'datetime_immutable', nullable: true)]
    private ?\DateTimeImmutable $updatedAt = null;

    private array $events = [];

    public function __construct(ProjectId $id, string $name, ?string $description, UserId $ownerId)
    {
        $this->id = $id->value();
        $this->name = $name;
        $this->description = $description;
        $this->ownerId = $ownerId->value();
        $this->memberIds = [$ownerId->value()];
        $this->createdAt = new \DateTimeImmutable();

        $this->recordEvent(new ProjectCreated($id, $name, $ownerId));
    }

    public function id(): ProjectId
    {
        return new ProjectId($this->id);
    }

    public function name(): string
    {
        return $this->name;
    }

    public function description(): ?string
    {
        return $this->description;
    }

    public function ownerId(): UserId
    {
        return new UserId($this->ownerId);
    }

    public function memberIds(): array
    {
        return array_map(fn($id) => new UserId($id), $this->memberIds);
    }

    public function addMember(UserId $userId): void
    {
        if (!in_array($userId->value(), $this->memberIds)) {
            $this->memberIds[] = $userId->value();
            $this->updatedAt = new \DateTimeImmutable();
        }
    }

    public function removeMember(UserId $userId): void
    {
        if ($userId->value() === $this->ownerId) {
            throw new \DomainException('Cannot remove owner from project');
        }

        $this->memberIds = array_filter($this->memberIds, fn($id) => $id !== $userId->value());
        $this->updatedAt = new \DateTimeImmutable();
    }

    public function updateName(string $name): void
    {
        $this->name = $name;
        $this->updatedAt = new \DateTimeImmutable();
    }

    public function updateDescription(?string $description): void
    {
        $this->description = $description;
        $this->updatedAt = new \DateTimeImmutable();
    }

    public function createdAt(): \DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function updatedAt(): ?\DateTimeImmutable
    {
        return $this->updatedAt;
    }

    private function recordEvent(object $event): void
    {
        $this->events[] = $event;
    }

    public function releaseEvents(): array
    {
        $events = $this->events;
        $this->events = [];

        return $events;
    }
}</code></pre>

    <h4>Doménový model: Úkol (Aggregate Root)</h4>
    <pre><code class="language-php">&lt;?php

namespace App\TaskManagement\Domain\Model;

use App\TaskManagement\Domain\Event\TaskCreated;
use App\TaskManagement\Domain\Event\TaskAssigned;
use App\TaskManagement\Domain\Event\TaskStatusChanged;
use App\TaskManagement\Domain\ValueObject\TaskId;
use App\TaskManagement\Domain\ValueObject\TaskStatus;
use App\ProjectManagement\Domain\ValueObject\ProjectId;
use App\UserManagement\Domain\ValueObject\UserId;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity]
#[ORM\Table(name: 'tasks')]
class Task
{
    public const STATUS_TODO = 'todo';
    public const STATUS_IN_PROGRESS = 'in_progress';
    public const STATUS_DONE = 'done';

    #[ORM\Id]
    #[ORM\Column(type: 'string', length: 36)]
    private string $id;

    #[ORM\Column(type: 'string', length: 255)]
    private string $title;

    #[ORM\Column(type: 'text', nullable: true)]
    private ?string $description;

    #[ORM\Column(type: 'string', length: 36)]
    private string $projectId;

    #[ORM\Column(type: 'string', length: 36, nullable: true)]
    private ?string $assigneeId = null;

    #[ORM\Column(type: 'string', length: 20)]
    private string $status;

    #[ORM\Column(type: 'datetime_immutable')]
    private \DateTimeImmutable $createdAt;

    #[ORM\Column(type: 'datetime_immutable', nullable: true)]
    private ?\DateTimeImmutable $updatedAt = null;

    private array $events = [];

    public function __construct(TaskId $id, string $title, ?string $description, ProjectId $projectId)
    {
        $this->id = $id->value();
        $this->title = $title;
        $this->description = $description;
        $this->projectId = $projectId->value();
        $this->status = self::STATUS_TODO;
        $this->createdAt = new \DateTimeImmutable();

        $this->recordEvent(new TaskCreated($id, $title, $projectId));
    }

    public function id(): TaskId
    {
        return new TaskId($this->id);
    }

    public function title(): string
    {
        return $this->title;
    }

    public function description(): ?string
    {
        return $this->description;
    }

    public function projectId(): ProjectId
    {
        return new ProjectId($this->projectId);
    }

    public function assigneeId(): ?UserId
    {
        return $this->assigneeId ? new UserId($this->assigneeId) : null;
    }

    public function status(): string
    {
        return $this->status;
    }

    public function assign(UserId $assigneeId): void
    {
        $this->assigneeId = $assigneeId->value();
        $this->updatedAt = new \DateTimeImmutable();

        $this->recordEvent(new TaskAssigned($this->id(), $assigneeId));
    }

    public function unassign(): void
    {
        $this->assigneeId = null;
        $this->updatedAt = new \DateTimeImmutable();
    }

    public function changeStatus(string $status): void
    {
        if (!in_array($status, [self::STATUS_TODO, self::STATUS_IN_PROGRESS, self::STATUS_DONE])) {
            throw new \InvalidArgumentException('Invalid status');
        }

        $oldStatus = $this->status;
        $this->status = $status;
        $this->updatedAt = new \DateTimeImmutable();

        $this->recordEvent(new TaskStatusChanged($this->id(), $oldStatus, $status));
    }

    public function updateTitle(string $title): void
    {
        $this->title = $title;
        $this->updatedAt = new \DateTimeImmutable();
    }

    public function updateDescription(?string $description): void
    {
        $this->description = $description;
        $this->updatedAt = new \DateTimeImmutable();
    }

    public function createdAt(): \DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function updatedAt(): ?\DateTimeImmutable
    {
        return $this->updatedAt;
    }

    private function recordEvent(object $event): void
    {
        $this->events[] = $event;
    }

    public function releaseEvents(): array
    {
        $events = $this->events;
        $this->events = [];

        return $events;
    }
}</code></pre>

    <h4>Command: Vytvoření projektu (Command Pattern)</h4>
    <pre><code class="language-php">&lt;?php

namespace App\ProjectManagement\Application\Command;

use Symfony\Component\Validator\Constraints as Assert;

class CreateProject
{
    public function __construct(
        #[Assert\NotBlank]
        #[Assert\Length(min: 3, max: 255)]
        public readonly string $name,

        public readonly ?string $description,

        #[Assert\NotBlank]
        #[Assert\Uuid]
        public readonly string $ownerId
    ) {
    }
}</code></pre>

    <h4>Command Handler: Zpracování vytvoření projektu (Application Service)</h4>
    <pre><code class="language-php">&lt;?php

namespace App\ProjectManagement\Application\Command;

use App\ProjectManagement\Domain\Model\Project;
use App\ProjectManagement\Domain\Repository\ProjectRepository;
use App\ProjectManagement\Domain\ValueObject\ProjectId;
use App\UserManagement\Domain\ValueObject\UserId;
use Symfony\Component\Messenger\Attribute\AsMessageHandler;

#[AsMessageHandler]
class CreateProjectHandler
{
    public function __construct(
        private ProjectRepository $projectRepository
    ) {
    }

    public function __invoke(CreateProject $command): string
    {
        $projectId = new ProjectId();

        $project = new Project(
            $projectId,
            $command->name,
            $command->description,
            new UserId($command->ownerId)
        );

        $this->projectRepository->save($project);

        return $projectId->value();
    }
}</code></pre>

    <h4>Command: Přiřazení úkolu (Command Pattern)</h4>
    <pre><code class="language-php">&lt;?php

namespace App\TaskManagement\Application\Command;

use Symfony\Component\Validator\Constraints as Assert;

class AssignTask
{
    public function __construct(
        #[Assert\NotBlank]
        #[Assert\Uuid]
        public readonly string $taskId,

        #[Assert\NotBlank]
        #[Assert\Uuid]
        public readonly string $assigneeId
    ) {
    }
}</code></pre>

    <h4>Command Handler: Zpracování přiřazení úkolu (Application Service)</h4>
    <pre><code class="language-php">&lt;?php

namespace App\TaskManagement\Application\Command;

use App\TaskManagement\Domain\Repository\TaskRepository;
use App\TaskManagement\Domain\ValueObject\TaskId;
use App\TaskManagement\Domain\Service\TaskAssignmentService;
use App\ProjectManagement\Domain\Repository\ProjectRepository;
use App\UserManagement\Domain\ValueObject\UserId;
use Symfony\Component\Messenger\Attribute\AsMessageHandler;

#[AsMessageHandler]
class AssignTaskHandler
{
    public function __construct(
        private TaskRepository $taskRepository,
        private ProjectRepository $projectRepository,
        private TaskAssignmentService $taskAssignmentService
    ) {
    }

    public function __invoke(AssignTask $command): void
    {
        $task = $this->taskRepository->findById(new TaskId($command->taskId));

        if (!$task) {
            throw new \DomainException('Task not found');
        }

        $project = $this->projectRepository->findById($task->projectId());

        if (!$project) {
            throw new \DomainException('Project not found');
        }

        $assigneeId = new UserId($command->assigneeId);

        // Použití doménové služby pro přiřazení úkolu
        $this->taskAssignmentService->assignTask($task, $project, $assigneeId);

        // Uložení úkolu
        $this->taskRepository->save($task);
    }
}</code></pre>

    <h4>Query: Získání projektů uživatele (Query Pattern)</h4>
    <pre><code class="language-php">&lt;?php

namespace App\ProjectManagement\Application\Query;

use Symfony\Component\Validator\Constraints as Assert;

class GetProjects
{
    public function __construct(
        #[Assert\NotBlank]
        #[Assert\Uuid]
        public readonly string $userId
    ) {
    }
}</code></pre>

    <h4>Query Handler: Zpracování získání projektů uživatele (Read Model)</h4>
    <pre><code class="language-php">&lt;?php

namespace App\ProjectManagement\Application\Query;

use App\ProjectManagement\Domain\Repository\ProjectRepository;
use App\ProjectManagement\Presentation\ViewModel\ProjectViewModel;
use App\UserManagement\Domain\ValueObject\UserId;
use Symfony\Component\Messenger\Attribute\AsMessageHandler;

#[AsMessageHandler]
class GetProjectsHandler
{
    public function __construct(
        private ProjectRepository $projectRepository
    ) {
    }

    public function __invoke(GetProjects $query): array
    {
        $projects = $this->projectRepository->findByMemberId(new UserId($query->userId));

        $result = [];

        foreach ($projects as $project) {
            $result[] = new ProjectViewModel(
                $project->id()->value(),
                $project->name(),
                $project->description(),
                $project->ownerId()->value(),
                count($project->memberIds()),
                $project->createdAt()
            );
        }

        return $result;
    }
}</code></pre>

    <h4>Doménová služba: Přiřazení úkolu</h4>
    <pre><code class="language-php">&lt;?php

namespace App\TaskManagement\Domain\Service;

use App\TaskManagement\Domain\Model\Task;
use App\ProjectManagement\Domain\Model\Project;
use App\UserManagement\Domain\ValueObject\UserId;
use App\Shared\Domain\Exception\DomainException;

class TaskAssignmentService
{
    public function assignTask(Task $task, Project $project, UserId $assigneeId): void
    {
        // Kontrola, zda je přiřazovaný uživatel členem projektu
        if (!$project->isMember($assigneeId)) {
            throw new DomainException('Assignee is not a member of the project');
        }

        // Kontrola, zda úkol patří do projektu
        if (!$task->projectId()->equals($project->id())) {
            throw new DomainException('Task does not belong to the project');
        }

        // Přiřazení úkolu
        $task->assign($assigneeId);
    }
}</code></pre>

    <h4>Anti-Corruption Layer: Integrace s externím systémem</h4>
    <pre><code class="language-php">&lt;?php

namespace App\Integration\ExternalTaskSystem;

use App\TaskManagement\Domain\Model\Task;
use App\TaskManagement\Domain\ValueObject\TaskId;
use App\Integration\ExternalTaskSystem\Client\ExternalTaskClient;
use App\Integration\ExternalTaskSystem\Translator\TaskTranslator;

class ExternalTaskAdapter
{
    private ExternalTaskClient $client;
    private TaskTranslator $translator;

    public function __construct(ExternalTaskClient $client, TaskTranslator $translator)
    {
        $this->client = $client;
        $this->translator = $translator;
    }

    public function exportTask(Task $task): void
    {
        $externalTask = $this->translator->toExternalTask($task);
        $this->client->createOrUpdateTask($externalTask);
    }

    public function importTask(string $externalTaskId): Task
    {
        $externalTask = $this->client->getTask($externalTaskId);
        return $this->translator->fromExternalTask($externalTask);
    }
}</code></pre>

    <h3 id="lessons">Ponaučení</h3>
    <p>
        Implementace systému pro správu projektů pomocí Domain-Driven Design a CQRS v Symfony 7 přinesla několik důležitých ponaučení:
    </p>

    <ol>
        <li>
            <strong>Strategický design je klíčový</strong> - Identifikace bounded contexts a jejich vztahů na začátku projektu poskytla jasný rámec pro vývoj. Definice context map pomohla předejít nedorozuměním a zajistila konzistentní integraci mezi kontexty.
        </li>
        <li>
            <strong>Ubiquitous Language je základem úspěchu</strong> - Vytvoření a používání společného jazyka s doménovými experty výrazně zlepšilo komunikaci a vedlo k přesnějšímu modelu. Konzistentní používání tohoto jazyka v kódu usnadnilo pochopení a údržbu.
        </li>
        <li>
            <strong>Agregáty a hranice transakcí</strong> - Správné definování agregátů a jejich hranic bylo klíčové pro zajištění konzistence dat. Každý agregát byl zodpovědný za udržování své vnitřní konzistence a byl měněn v rámci jedné transakce.
        </li>
        <li>
            <strong>Doménové události pro integraci</strong> - Doménové události byly klíčové pro komunikaci mezi různými bounded contexts. Například, když byl vytvořen nový úkol, byla vygenerována událost <code>TaskCreated</code>, která mohla být zpracována jinými kontexty bez vytváření přímých závislostí.
        </li>
        <li>
            <strong>CQRS pro oddělení zodpovědností</strong> - Oddělení operací čtení a zápisu vedlo k čistšímu a udržitelnějšímu kódu. Příkazy a dotazy byly jasně odděleny, což usnadnilo testování a rozšiřování. Symfony Messenger poskytl výkonnou infrastrukturu pro implementaci CQRS.
        </li>
        <li>
            <strong>Vertikální slice architektura pro modularitu</strong> - Organizace kódu podle funkcí (features) místo technických vrstev vedla k lepší modularitě a udržitelnosti. Každá funkce obsahovala všechny vrstvy potřebné pro její implementaci, což usnadnilo změny a rozšíření.
        </li>
        <li>
            <strong>Testování doménového modelu</strong> - Důraz na testování doménového modelu vedl k robustnějšímu a spolehlivějšímu systému. Testy jednotek se zaměřovaly na chování agregátů a doménových služeb, zatímco integrační testy ověřovaly spolupráci mezi různými částmi systému.
        </li>
    </ol>

    <div class="warning-box">
        <h4>Důležité poznámky pro implementaci DDD</h4>
        <p>
            Při implementaci Domain-Driven Design a CQRS v Symfony 7 je důležité:
        </p>
        <ul>
            <li>Začít strategickým designem - identifikovat bounded contexts a jejich vztahy před zahájením implementace.</li>
            <li>Vytvořit a používat Ubiquitous Language ve spolupráci s doménovými experty.</li>
            <li>Definovat jasné hranice mezi bounded contexts a implementovat vhodné integrační vzory (Shared Kernel, Customer-Supplier, Conformist, Anti-Corruption Layer).</li>
            <li>Správně identifikovat agregáty a jejich hranice, aby byla zajištěna konzistence dat.</li>
            <li>Používat hodnotové objekty pro validaci a enkapsulaci doménových konceptů.</li>
            <li>Implementovat doménové události pro komunikaci mezi bounded contexts.</li>
            <li>Oddělovat příkazy a dotazy podle CQRS principů.</li>
            <li>Používat Symfony Messenger pro implementaci command a query busů.</li>
            <li>Testovat doménový model nezávisle na infrastruktuře.</li>
            <li>Používat hexagonální architekturu pro oddělení domény od infrastruktury.</li>
            <li>Implementovat repozitáře jako rozhraní v doménové vrstvě a jejich konkrétní implementace v infrastrukturní vrstvě.</li>
        </ul>
    </div>

    <p>
        V další kapitole se podíváme na <a href="{{ path('resources') }}">zdroje a další četbu o DDD a CQRS v Symfony 7</a>.
    </p>
{% endblock %}
