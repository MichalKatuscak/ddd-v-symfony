{% extends 'base.html.twig' %}

{% block title %}Vertikální slice architektura vs. Tradiční DDD: Srovnání přístupů | DDD Symfony{% endblock %}

{% block meta_description %}Porovnání vertikální slice architektury a tradičního přístupu k Domain-Driven Design. Zjistěte, který přístup je vhodnější pro váš Symfony projekt a jaké jsou jejich výhody a nevýhody.{% endblock %}

{% block meta_keywords %}vertikální slice architektura, tradiční DDD, feature slices, vrstvená architektura, modularity, Symfony architektura, organizace kódu, Domain-Driven Design{% endblock %}

{% block structured_data %}
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "TechArticle",
  "headline": "Vertikální slice architektura vs. Tradiční DDD: Srovnání přístupů",
  "description": "{{ block('meta_description') }}",
  "keywords": "{{ block('meta_keywords') }}",
  "author": {
            "@type": "Person",
            "name": "Michal Katuščák"
  },
  "publisher": {
            "@type": "Person",
            "name": "Michal Katuščák"
  },
  "datePublished": "2025-04-24",
  "dateModified": "{{ "now"|date("Y-m-d") }}",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "{{ app.request.schemeAndHttpHost }}{{ app.request.pathInfo }}"
  }
}
</script>
{% endblock %}

{% block body %}
    <article itemscope itemtype="https://schema.org/TechArticle">
    <h2 itemprop="headline">Vertikální slice architektura vs. Tradiční DDD</h2>

    <div class="table-of-contents mb-4" role="navigation" aria-labelledby="toc-heading">
        <h5 id="toc-heading">Obsah kapitoly:</h5>
        <ul>
            <li><a href="#traditional">Tradiční přístup k DDD</a></li>
            <li><a href="#horizontal">Vertikální slice architektura</a></li>
            <li><a href="#comparison">Porovnání přístupů</a></li>
            <li><a href="#when-to-use">Kdy použít který přístup</a></li>
            <li><a href="#symfony-implementation">Implementace v Symfony 7</a></li>
        </ul>
    </div>

    <section id="traditional" aria-labelledby="traditional-heading">
    <h3 id="traditional-heading">Tradiční přístup k DDD</h3>
    <p>
        Tradiční přístup k DDD, často označovaný jako "vrstvený" (layered), organizuje kód do vrstev podle technické odpovědnosti <a href="https://herbertograca.com/2017/11/16/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/" target="_blank">[1]</a>.
        Typické vrstvy v tradičním DDD jsou:
    </p>

    <ul>
        <li><strong>Prezentační vrstva (Presentation Layer)</strong> - Zodpovědná za interakci s uživatelem.</li>
        <li><strong>Aplikační vrstva (Application Layer)</strong> - Koordinuje aplikační aktivity a deleguje práci doménové vrstvě.</li>
        <li><strong>Doménová vrstva (Domain Layer)</strong> - Obsahuje doménový model a doménovou logiku.</li>
        <li><strong>Infrastrukturní vrstva (Infrastructure Layer)</strong> - Poskytuje technické služby pro ostatní vrstvy.</li>
    </ul>

    <div class="example-box">
        <h4>Příklad: Tradiční struktura DDD projektu</h4>
        <pre><code class="language-bash">src/
├── Presentation/                # Prezentační vrstva
│   └── Controller/
│       └── UserController.php
├── Application/                 # Aplikační vrstva
│   ├── Service/
│   │   └── UserService.php
│   └── DTO/
│       └── UserDTO.php
├── Domain/                      # Doménová vrstva
│   ├── Model/
│   │   └── User.php
│   ├── Repository/
│   │   └── UserRepository.php
│   └── Service/
│       └── DomainUserService.php
└── Infrastructure/              # Infrastrukturní vrstva
    ├── Repository/
    │   └── DoctrineUserRepository.php
    └── Persistence/
        └── Doctrine/
            └── Mapping/
                └── User.orm.xml</code></pre>
    </div>

    <p>
        V tradičním přístupu jsou vrstvy organizovány horizontálně, což znamená, že každá vrstva poskytuje služby vrstvě nad ní.
        Tento přístup je často znázorňován jako "cibulová" nebo "hexagonální" architektura <a href="https://alistair.cockburn.us/hexagonal-architecture/" target="_blank">[2]</a>.
    </p>
    </section>

    <section id="horizontal" aria-labelledby="horizontal-heading">
    <h3 id="horizontal-heading">Vertikální slice architektura (Vertical Slice Architecture)</h3>
    <p>
        Vertikální slice architektura (někdy nepřesně označovaná jako "horizontální DDD") organizuje kód podle funkcí (feature slices) místo technických vrstev <a href="https://www.jimmybogard.com/vertical-slice-architecture/" target="_blank">[3]</a>.
        Každá funkce (feature) obsahuje všechny vrstvy potřebné pro její implementaci, což umožňuje lepší modularitu a nezávislost jednotlivých částí aplikace.
    </p>

    <div class="example-box" role="note" aria-labelledby="vertical-slice-example-heading">
        <h4 id="vertical-slice-example-heading">Příklad: Struktura projektu s vertikální slice architekturou</h4>
        <pre><code class="language-bash">src/
├── UserManagement/             # Bounded Context: Správa uživatelů
│   ├── Registration/           # Feature: Registrace uživatelů
│   │   ├── Domain/             # Doménová logika pro registraci
│   │   ├── Application/       # Aplikační logika pro registraci
│   │   │   ├── Command/
│   │   │   │   ├── RegisterUser.php
│   │   │   │   └── RegisterUserHandler.php
│   │   │   └── Service/
│   │   │       └── RegistrationService.php
│   │   └── Presentation/      # Prezentační vrstva pro registraci
│   │       ├── Controller/
│   │       │   └── UserRegistrationController.php
│   │       └── Form/
│   │           └── UserRegistrationForm.php
│   ├── Profile/                # Feature: Profil uživatele
│   │   ├── Application/       # Aplikační logika pro profil
│   │   │   ├── Query/
│   │   │   │   ├── GetUserProfile.php
│   │   │   │   └── GetUserProfileHandler.php
│   │   └── Presentation/      # Prezentační vrstva pro profil
│   │       ├── Controller/
│   │       │   └── UserProfileController.php
│   │       └── ViewModel/
│   │           └── UserProfileViewModel.php
│   ├── Domain/                # Sdílená doménová logika pro celý kontext
│   │   ├── Model/
│   │   │   └── User.php       # Entita (Aggregate Root)
│   │   ├── ValueObject/
│   │   │   ├── UserId.php
│   │   │   └── Email.php
│   │   └── Repository/
│   │       └── UserRepository.php  # Rozhraní
│   └── Infrastructure/       # Infrastruktura pro celý kontext
│       └── Repository/
│           └── DoctrineUserRepository.php
├── OrderManagement/           # Bounded Context: Správa objednávek
│   ├── Checkout/              # Feature: Pokladna
│   │   ├── Application/
│   │   │   ├── Command/
│   │   │   │   ├── CreateOrder.php
│   │   │   │   └── CreateOrderHandler.php
│   │   └── Presentation/
│   │       ├── Controller/
│   │       │   └── CheckoutController.php
│   │       └── Form/
│   │           └── CheckoutForm.php
│   └── ... (podobná struktura jako u UserManagement)
└── Shared/                    # Sdílené komponenty pro celý systém
    └── Domain/
        └── Exception/
            └── DomainException.php</code></pre>
    </div>

    <p>
        Ve vertikální slice architektuře jsou funkce (features) organizovány jako vertikální řezy (slices) přes všechny vrstvy, přičemž každá funkce obsahuje všechny vrstvy potřebné pro její implementaci.
        Tento přístup minimalizuje vazby mezi jednotlivými funkcemi a maximalizuje vazby uvnitř funkce <a href="https://www.youtube.com/watch?v=SUiWfhAhgQw" target="_blank">[4]</a>. Zároveň zachovává principy DDD tím, že respektuje bounded contexts a doménový model.
    </p>
    </section>

    <section id="comparison" aria-labelledby="comparison-heading">
    <h3 id="comparison-heading">Porovnání přístupů</h3>

    <div class="table-responsive">
        <table class="table table-bordered" aria-labelledby="comparison-heading">
            <thead class="table-light">
                <tr>
                    <th>Aspekt</th>
                    <th>Tradiční (vertikální) DDD</th>
                    <th>Vertikální slice architektura</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><strong>Organizace kódu</strong></td>
                    <td>Podle technických vrstev</td>
                    <td>Podle funkcí (features)</td>
                </tr>
                <tr>
                    <td><strong>Vazby</strong></td>
                    <td>Silné vazby mezi vrstvami</td>
                    <td>Silné vazby uvnitř funkce, slabé vazby mezi funkcemi</td>
                </tr>
                <tr>
                    <td><strong>Změny</strong></td>
                    <td>Změna často vyžaduje úpravy ve více vrstvách</td>
                    <td>Změna je obvykle omezena na jednu funkci</td>
                </tr>
                <tr>
                    <td><strong>Testovatelnost</strong></td>
                    <td>Často vyžaduje mnoho mocků pro testování</td>
                    <td>Snazší testování, méně mocků</td>
                </tr>
                <tr>
                    <td><strong>Škálovatelnost</strong></td>
                    <td>Může být obtížné škálovat při růstu aplikace</td>
                    <td>Snazší škálování, funkce mohou být rozděleny do mikroslužeb</td>
                </tr>
                <tr>
                    <td><strong>Složitost</strong></td>
                    <td>Jednodušší pro pochopení na začátku</td>
                    <td>Může být složitější pro pochopení na začátku</td>
                </tr>
                <tr>
                    <td><strong>Vhodnost pro CQRS</strong></td>
                    <td>Vyžaduje dodatečnou práci pro implementaci CQRS</td>
                    <td>Přirozeně podporuje CQRS <a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/apply-simplified-microservice-cqrs-ddd-patterns" target="_blank">[5]</a></td>
                </tr>
            </tbody>
        </table>
    </div>
    </section>

    <section id="when-to-use" aria-labelledby="when-to-use-heading">
    <h3 id="when-to-use-heading">Kdy použít který přístup</h3>

    <div class="concept-box" role="note" aria-labelledby="traditional-when-to-use-heading">
        <h4 id="traditional-when-to-use-heading">Kdy použít tradiční DDD:</h4>
        <ul>
            <li>Když je tým zvyklý na tradiční architekturu.</li>
            <li>Pro menší aplikace s jasně definovanými vrstvami.</li>
            <li>Když je důležitá jasná separace technických vrstev.</li>
            <li>Pro aplikace s jednodušší doménovou logikou.</li>
        </ul>
    </div>

    <div class="concept-box" role="note" aria-labelledby="vertical-slice-when-to-use-heading">
        <h4 id="vertical-slice-when-to-use-heading">Kdy použít vertikální slice architekturu:</h4>
        <ul>
            <li>Pro větší a složitější aplikace <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank">[6]</a>.</li>
            <li>Když je důležitá modularita a nezávislost funkcí.</li>
            <li>Pro aplikace, které budou v budoucnu rozděleny do mikroslužeb.</li>
            <li>Když chcete implementovat CQRS.</li>
            <li>Pro týmy, které jsou zvyklé na agilní vývoj a časté změny.</li>
        </ul>
    </div>
    </section>

    <section id="symfony-implementation" aria-labelledby="symfony-implementation-heading">
    <h3 id="symfony-implementation-heading">Implementace v Symfony 7</h3>
    <p>
        Symfony 7 poskytuje mnoho nástrojů a komponent, které usnadňují implementaci obou přístupů k DDD <a href="https://symfony.com/doc/current/index.html" target="_blank">[7]</a>.
    </p>

    <h4 id="traditional-symfony-implementation-heading">Implementace tradičního DDD v Symfony 7:</h4>
    <p>
        Pro implementaci tradičního DDD v Symfony 7 můžete použít standardní adresářovou strukturu Symfony a rozdělit kód do vrstev:
    </p>

    <pre><code class="language-bash">src/
├── UserManagement/             # Bounded Context: Správa uživatelů
│   ├── Presentation/            # Prezentační vrstva
│   │   ├── Controller/
│   │   │   ├── UserController.php
│   │   │   └── RegistrationController.php
│   │   └── ViewModel/
│   │       └── UserViewModel.php
│   ├── Application/            # Aplikační vrstva
│   │   ├── Command/
│   │   │   ├── RegisterUser.php
│   │   │   └── RegisterUserHandler.php
│   │   ├── Query/
│   │   │   ├── GetUser.php
│   │   │   └── GetUserHandler.php
│   │   └── Service/
│   │       └── UserApplicationService.php
│   ├── Domain/                 # Doménová vrstva
│   │   ├── Model/
│   │   │   └── User.php         # Entita (Aggregate Root)
│   │   ├── ValueObject/
│   │   │   ├── UserId.php
│   │   │   └── Email.php
│   │   ├── Event/
│   │   │   └── UserRegistered.php
│   │   ├── Repository/
│   │   │   └── UserRepository.php  # Rozhraní
│   │   └── Service/
│   │       └── UserDomainService.php
│   └── Infrastructure/         # Infrastrukturní vrstva
│       ├── Repository/
│       │   └── DoctrineUserRepository.php
│       └── Persistence/
│           └── Doctrine/
│               └── Mapping/
│                   └── User.orm.xml
├── OrderManagement/           # Bounded Context: Správa objednávek
│   ├── Presentation/            # Prezentační vrstva
│   ├── Application/            # Aplikační vrstva
│   ├── Domain/                 # Doménová vrstva
│   └── Infrastructure/         # Infrastrukturní vrstva
└── Shared/                    # Sdílené komponenty
    └── Domain/                 # Sdílená doménová logika
        └── Exception/
            └── DomainException.php</code></pre>

    <h4 id="vertical-slice-symfony-implementation-heading">Implementace vertikální slice architektury v Symfony 7:</h4>
    <p>
        Pro implementaci vertikální slice architektury v Symfony 7 můžete organizovat kód podle funkcí (features) <a href="https://dev.to/etienneleba/another-way-to-structure-your-symfony-project-llo" target="_blank">[8]</a>:
    </p>

    <pre><code class="language-bash">src/
├── UserManagement/             # Bounded Context: Správa uživatelů
│   ├── Registration/           # Feature: Registrace uživatelů
│   │   ├── Domain/             # Doménová logika pro registraci
│   │   │   ├── Event/
│   │   │   │   └── UserRegistered.php
│   │   │   └── Service/
│   │   │       └── RegistrationDomainService.php
│   │   ├── Application/       # Aplikační logika pro registraci
│   │   │   ├── Command/
│   │   │   │   ├── RegisterUser.php
│   │   │   │   └── RegisterUserHandler.php
│   │   │   └── Service/
│   │   │       └── RegistrationService.php
│   │   └── Presentation/      # Prezentační vrstva pro registraci
│   │       ├── Controller/
│   │       │   └── UserRegistrationController.php
│   │       └── Form/
│   │           └── UserRegistrationForm.php
│   ├── Profile/                # Feature: Profil uživatele
│   │   ├── Application/       # Aplikační logika pro profil
│   │   │   ├── Query/
│   │   │   │   ├── GetUserProfile.php
│   │   │   │   └── GetUserProfileHandler.php
│   │   │   └── Service/
│   │   │       └── ProfileService.php
│   │   └── Presentation/      # Prezentační vrstva pro profil
│   │       ├── Controller/
│   │       │   └── UserProfileController.php
│   │       └── ViewModel/
│   │           └── UserProfileViewModel.php
│   ├── Domain/                # Sdílená doménová logika pro celý kontext
│   │   ├── Model/
│   │   │   └── User.php       # Entita (Aggregate Root)
│   │   ├── ValueObject/
│   │   │   ├── UserId.php
│   │   │   └── Email.php
│   │   └── Repository/
│   │       └── UserRepository.php  # Rozhraní
│   └── Infrastructure/       # Infrastruktura pro celý kontext
│       └── Repository/
│           └── DoctrineUserRepository.php
├── OrderManagement/           # Bounded Context: Správa objednávek
│   ├── Checkout/              # Feature: Pokladna
│   │   ├── Domain/
│   │   ├── Application/
│   │   └── Presentation/
│   └── ... (podobná struktura jako u UserManagement)
└── Shared/                    # Sdílené komponenty pro celý systém
    └── Domain/
        └── Exception/
            └── DomainException.php</code></pre>

    <p>
        Symfony 7 poskytuje mnoho komponent, které jsou užitečné pro implementaci vertikální slice architektury <a href="https://symfony.com/doc/current/components/index.html" target="_blank">[9]</a>:
    </p>

    <ul>
        <li><strong>Messenger komponenta</strong> - Pro implementaci CQRS a asynchronní zpracování <a href="https://symfony.com/doc/current/messenger.html" target="_blank">[10]</a>.</li>
        <li><strong>Validator komponenta</strong> - Pro validaci doménových objektů.</li>
        <li><strong>Form komponenta</strong> - Pro zpracování vstupů od uživatele.</li>
        <li><strong>Security komponenta</strong> - Pro autentizaci a autorizaci.</li>
        <li><strong>Doctrine ORM</strong> - Pro persistenci doménových objektů.</li>
    </ul>

    <div class="warning-box" role="note" aria-labelledby="important-notes-heading">
        <h4 id="important-notes-heading">Důležité poznámky</h4>
        <p>
            Při implementaci vertikální slice architektury v Symfony 7 je důležité:
        </p>
        <ul>
            <li>Minimalizovat vazby mezi jednotlivými funkcemi (features).</li>
            <li>Používat CQRS pro oddělení čtení a zápisu <a href="https://symfony.com/doc/current/messenger/multiple_buses.html" target="_blank">[11]</a>.</li>
            <li>Používat doménové události pro komunikaci mezi funkcemi.</li>
            <li>Definovat jasné hranice mezi funkcemi.</li>
        </ul>
    </div>

    <p>
        V další kapitole se podíváme na <a href="{{ path('basic_concepts') }}">základní koncepty DDD</a> a jak je implementovat v Symfony 7.
    </p>
    </section>
    </article>
{% endblock %}
