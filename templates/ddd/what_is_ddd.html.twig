{% extends 'base.html.twig' %}

{% block title %}Co je Domain-Driven Design? Komplexní vysvětlení DDD | DDD Symfony{% endblock %}

{% block meta_description %}Objevte, co je Domain-Driven Design (DDD) a jaké jsou jeho základní principy. Naučte se, jak DDD pomáhá řešit komplexní domény a zlepšuje komunikaci mezi vývojáři a doménovými experty.{% endblock %}

{% block meta_keywords %}Domain-Driven Design, DDD, Eric Evans, Ubiquitous Language, Bounded Context, doménový model, doménová logika, strategický design, taktický design{% endblock %}

{% block body %}
    <h2>Co je Domain-Driven Design?</h2>

    <div class="table-of-contents mb-4">
        <h5>Obsah kapitoly:</h5>
        <ul>
            <li><a href="#definition">Definice DDD</a></li>
            <li><a href="#history">Historie a vývoj DDD</a></li>
            <li><a href="#principles">Základní principy DDD</a></li>
            <li><a href="#benefits">Výhody používání DDD</a></li>
            <li><a href="#challenges">Výzvy a omezení DDD</a></li>
        </ul>
    </div>

    <h3 id="definition">Definice DDD</h3>
    <p>
        Domain-Driven Design (DDD) je přístup k vývoji softwaru, který se zaměřuje na modelování domény a její implementaci v kódu.
        Byl představen Ericem Evansem v jeho knize "Domain-Driven Design: Tackling Complexity in the Heart of Software" v roce 2003 <a href="https://www.domainlanguage.com/ddd/" target="_blank">[1]</a>.
    </p>

    <div class="concept-box">
        <h4>Klíčové aspekty DDD:</h4>
        <ul>
            <li><strong>Doména (Domain)</strong> - Oblast znalostí, problémů a aktivit, na kterou se aplikace zaměřuje <a href="https://martinfowler.com/bliki/DomainDrivenDesign.html" target="_blank">[2]</a>. Doména představuje specifickou oblast, kterou se software snaží modelovat a řešit.</li>
            <li><strong>Ubiquitous Language</strong> - Společný jazyk používaný vývojáři a doménovými experty <a href="https://martinfowler.com/bliki/UbiquitousLanguage.html" target="_blank">[3]</a>. Tento jazyk eliminuje nedorozumění a zajišťuje, že všichni účastníci projektu mluví stejným jazykem.</li>
            <li><strong>Bounded Context</strong> - Jasně definovaná hranice, ve které je model platný <a href="https://martinfowler.com/bliki/BoundedContext.html" target="_blank">[4]</a>. Bounded Context pomáhá rozdělit složité domény do menších, lépe zvládnutelných částí.</li>
            <li><strong>Model-Driven Design</strong> - Návrh softwaru založený na modelu domény <a href="https://www.infoq.com/articles/ddd-in-practice/" target="_blank">[5]</a>. Model je zjednodušenou reprezentací domény, která zachycuje její klíčové aspekty.</li>
        </ul>
    </div>

    <h3 id="history">Historie a vývoj DDD</h3>
    <p>
        Domain-Driven Design byl představen Ericem Evansem v roce 2003. Od té doby se stal populárním přístupem k vývoji softwaru,
        zejména pro složité aplikace s bohatou doménou. V průběhu let se DDD vyvíjel a byly představeny nové koncepty a techniky <a href="https://dddcommunity.org/" target="_blank">[6]</a>.
    </p>

    <p>
        V posledních letech se DDD často kombinuje s dalšími architektonickými vzory, jako je CQRS (Command Query Responsibility Segregation)
        a Event Sourcing, což vede k ještě výkonnějším a flexibilnějším architekturám <a href="https://www.youtube.com/watch?v=JHGkaShoyNs" target="_blank">[7]</a> <a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/" target="_blank">[8]</a>.
    </p>

    <h3 id="principles">Základní principy DDD</h3>
    <p>
        Domain-Driven Design je založen na několika základních principech:
    </p>

    <ol>
        <li>
            <strong>Zaměření na doménu</strong> - DDD se zaměřuje na doménu a doménovou logiku. Technické detaily jsou sekundární.
        </li>
        <li>
            <strong>Ubiquitous Language</strong> - DDD používá společný jazyk mezi vývojáři a doménovými experty, který je používán v kódu, dokumentaci a komunikaci.
        </li>
        <li>
            <strong>Bounded Context</strong> - DDD rozděluje složité domény do menších, jasně definovaných kontextů s explicitními hranicemi.
        </li>
        <li>
            <strong>Model-Driven Design</strong> - DDD používá model jako základ pro návrh softwaru. Model je zjednodušenou reprezentací domény.
        </li>
        <li>
            <strong>Strategic Design</strong> - DDD poskytuje nástroje pro strategický návrh, který pomáhá definovat hranice mezi různými částmi systému.
        </li>
        <li>
            <strong>Tactical Design</strong> - DDD poskytuje vzory pro taktický návrh, které pomáhají implementovat doménový model v kódu.
        </li>
    </ol>

    <h3 id="strategic-design">Strategický design (Strategic Design)</h3>
    <p>
        Strategický design se zabývá širším kontextem systému a definuje, jak různé části systému spolu interagují. Klíčové koncepty strategického designu zahrnují:
    </p>

    <ul>
        <li>
            <strong>Bounded Context</strong> - Ohraničený kontext je explicitní hranice, ve které je doménový model platný. Každý bounded context má svůj vlastní Ubiquitous Language a model.
        </li>
        <li>
            <strong>Context Map</strong> - Mapa kontextů zobrazuje vztahy mezi různými bounded contexts. Tyto vztahy mohou být různého typu, například Partnership, Customer-Supplier, Conformist, Anti-Corruption Layer, atd.
        </li>
        <li>
            <strong>Shared Kernel</strong> - Sdílené jádro je část modelu, která je sdílena mezi dvěma nebo více bounded contexts. Toto sdílení vyžaduje úzkou spolupráci mezi týmy.
        </li>
        <li>
            <strong>Customer-Supplier</strong> - Vztah zákazník-dodavatel mezi dvěma bounded contexts, kde jeden kontext (dodavatel) poskytuje služby druhému kontextu (zákazník).
        </li>
        <li>
            <strong>Conformist</strong> - Vztah, kde jeden kontext přijímá model jiného kontextu bez možnosti jej ovlivnit.
        </li>
        <li>
            <strong>Anti-Corruption Layer</strong> - Vrstva, která překládá mezi dvěma bounded contexts s různými modely, aby chránila integritu cílového modelu.
        </li>
        <li>
            <strong>Open Host Service</strong> - Služba, která definuje protokol pro přístup k bounded contextu, aby usnadnila integraci s mnoha jinými kontexty.
        </li>
        <li>
            <strong>Published Language</strong> - Dobře dokumentovaný jazyk, který usnadňuje komunikaci mezi různými bounded contexts.
        </li>
    </ul>

    <h3 id="tactical-design">Taktický design (Tactical Design)</h3>
    <p>
        Taktický design se zabývá implementací doménového modelu v rámci jednoho bounded contextu. Klíčové vzory taktického designu zahrnují:
    </p>

    <ul>
        <li>
            <strong>Entity</strong> - Objekty, které mají identitu a kontinuitu v čase. Entity jsou definovány svou identitou, nikoli svými atributy. Například, osoba je entita, protože má svou identitu (jméno, datum narození), i když se její atributy (výska, váha) mění.
        </li>
        <li>
            <strong>Value Object</strong> - Hodnotové objekty jsou definovány svými atributy, nikoli identitou. Jsou neměnné (immutable) a používají se k popisu aspektů domény. Například, adresa nebo peněžní částka jsou hodnotové objekty.
        </li>
        <li>
            <strong>Aggregate</strong> - Agregát je shluk objektů, které jsou považovány za jednu jednotku z hlediska změn dat. Každý agregát má kořenovou entitu (Aggregate Root), která je jediným vstupním bodem pro manipulaci s agregátem.
        </li>
        <li>
            <strong>Domain Event</strong> - Doménová událost reprezentuje něco, co se stalo v doméně a má význam pro doménové experty. Doménové události jsou často používány pro komunikaci mezi různými bounded contexts.
        </li>
        <li>
            <strong>Service</strong> - Doménová služba implementuje doménovou logiku, která nepatří přirozeně do žádné entity nebo hodnotového objektu. Služby jsou bezstavové a jejich názvy by měly být odvozeny z Ubiquitous Language.
        </li>
        <li>
            <strong>Repository</strong> - Repozitář zapouzdřuje logiku pro přístup k persistenci agregátů. Poskytuje abstrakci nad datovým úložištěm a umožňuje pracovat s agregáty jako s objekty v paměti.
        </li>
        <li>
            <strong>Factory</strong> - Továrna zapouzdřuje logiku pro vytváření složitých objektů a agregátů. Používá se, když je vytvoření objektu složité nebo když je potřeba zajistit konzistenci nově vytvořených objektů.
        </li>
    </ul>

    <div class="example-box">
        <h4>Příklad: Agregát v e-commerce doméně</h4>
        <p>
            V e-commerce doméně by objednávka (Order) mohla být agregátem s následujícími částmi:
        </p>
        <ul>
            <li><strong>Order</strong> - Kořenová entita (Aggregate Root)</li>
            <li><strong>OrderLine</strong> - Entity reprezentující položky objednávky</li>
            <li><strong>Money</strong> - Hodnotový objekt reprezentující peněžní částku</li>
            <li><strong>Address</strong> - Hodnotový objekt reprezentující dodací adresu</li>
        </ul>
        <p>
            Přístup k OrderLine entitám je možný pouze přes Order entitu, což zajistí konzistenci celého agregátu.
        </p>
    </div>

    <h3 id="implementation">Implementace DDD v praxi</h3>
    <p>
        Implementace Domain-Driven Design v praxi zahrnuje několik klíčových kroků:
    </p>

    <ol>
        <li>
            <strong>Pochopení domény</strong> - Prvním krokem je důkladné pochopení domény ve spolupráci s doménovými experty. Tato fáze zahrnuje rozhovory, workshopy a modelování.
        </li>
        <li>
            <strong>Vytvoření Ubiquitous Language</strong> - Definování společného jazyka, který bude používán vývojáři i doménovými experty. Tento jazyk by měl být dokumentován a neustále aktualizován.
        </li>
        <li>
            <strong>Identifikace Bounded Contexts</strong> - Rozdělení složité domény do menších, jasně definovaných kontextů s explicitními hranicemi.
        </li>
        <li>
            <strong>Vytvoření Context Map</strong> - Definování vztahů mezi různými bounded contexts a způsobu jejich integrace.
        </li>
        <li>
            <strong>Modelování domény</strong> - Vytvoření doménového modelu pro každý bounded context, který zachycuje klíčové koncepty a vztahy v doméně.
        </li>
        <li>
            <strong>Implementace taktických vzorů</strong> - Použití taktických vzorů DDD (Entity, Value Object, Aggregate, Repository, atd.) pro implementaci doménového modelu v kódu.
        </li>
        <li>
            <strong>Testování</strong> - Důkladné testování doménového modelu a jeho chování, aby bylo zajištěno, že správně modeluje doménu.
        </li>
        <li>
            <strong>Iterace a vylepšování</strong> - Neustálé vylepšování modelu na základě zpětné vazby od doménových expertů a zkušeností z implementace.
        </li>
    </ol>

    <h3 id="benefits">Výhody používání DDD</h3>
    <p>
        Domain-Driven Design přináší mnoho výhod pro vývoj softwaru:
    </p>

    <ul>
        <li><strong>Lepší komunikace</strong> - DDD usnadňuje komunikaci mezi vývojáři a doménovými experty díky společnému jazyku (Ubiquitous Language).</li>
        <li><strong>Lepší pochopení domény</strong> - DDD pomáhá vývojářům lépe pochopit doménu, což vede k lepším řešením a menšímu počtu chyb.</li>
        <li><strong>Flexibilita</strong> - DDD vytváří flexibilní architekturu, která se může snadno přizpůsobit změnám v doméně, což je klíčové v dnešním rychle se měnícím prostředí.</li>
        <li><strong>Modularita</strong> - DDD podporuje modularitu prostřednictvím bounded contexts, což usnadňuje údržbu, rozšiřování a škálování aplikace.</li>
        <li><strong>Testovatelnost</strong> - DDD vytváří kód, který je snadno testovatelný, což vede k robustnějšímu a spolehlivějšímu softwaru.</li>
        <li><strong>Zaměření na hodnotu</strong> - DDD se zaměřuje na poskytování hodnoty pro podnikání tím, že se soustředí na klíčové části domény.</li>
        <li><strong>Lepší spolupráce</strong> - DDD podporuje spolupráci mezi různými zúčastněnými stranami (vývojáři, doménoví experti, manažeři) díky společnému jazyku a modelu.</li>
        <li><strong>Snížení technického dluhu</strong> - DDD pomáhá snižovat technický dluh tím, že podporuje jasný a srozumitelný kód, který odráží doménu.</li>
    </ul>

    <div class="example-box">
        <h4>Příklad: Ubiquitous Language v e-commerce doméně</h4>
        <p>
            V e-commerce doméně by Ubiquitous Language mohl zahrnovat pojmy jako:
        </p>
        <ul>
            <li><strong>Košík (Cart)</strong> - Dočasná kolekce produktů, které si zákazník vybral k nákupu.</li>
            <li><strong>Objednávka (Order)</strong> - Potvrzený nákup zákazníka, který obsahuje produkty, dodací adresu a platební informace.</li>
            <li><strong>Katalog (Catalog)</strong> - Kolekce všech produktů dostupných k prodeji.</li>
            <li><strong>Zákazník (Customer)</strong> - Osoba, která nakupuje produkty.</li>
        </ul>
        <p>
            Tyto pojmy by byly používány konzistentně v kódu, dokumentaci a komunikaci mezi vývojáři a doménovými experty.
        </p>
    </div>

    <h3 id="challenges">Výzvy a omezení DDD</h3>
    <p>
        I když DDD přináší mnoho výhod, má také své výzvy a omezení, které je třeba zvážit před jeho adopcí:
    </p>

    <ul>
        <li><strong>Složitost</strong> - DDD může být složité pochopit a implementovat, zejména pro začátečníky. Vyžaduje hluboké pochopení domény a architektonických principů.</li>
        <li><strong>Časová náročnost</strong> - Implementace DDD může být časově náročná, zejména v počátečních fázích projektu. Modelování domény a vytváření Ubiquitous Language vyžaduje čas a úsilí.</li>
        <li><strong>Nevhodnost pro jednoduché aplikace</strong> - DDD je navržen pro složité aplikace s bohatou doménou. Pro jednoduché aplikace s minimální doménovou logikou může být zbytečně složitý a nákladný.</li>
        <li><strong>Potřeba doménových expertů</strong> - DDD vyžaduje přístup k doménovým expertům, což nemusí být vždy možné. Bez doménových expertů je obtížné vytvořit přesný model domény.</li>
        <li><strong>Organizace týmu</strong> - DDD může vyžadovat změny v organizaci týmu, aby podporovala spolupráci mezi vývojáři a doménovými experty. To může být v některých organizacích obtížné.</li>
        <li><strong>Integrace s legacy systémy</strong> - Integrace DDD s existujícími legacy systémy může být náročná a může vyžadovat vytvoření Anti-Corruption Layer.</li>
        <li><strong>Výkonnost</strong> - Některé vzory DDD, jako jsou agregáty a repozitáře, mohou mít dopad na výkonnost, pokud nejsou správně implementovány.</li>
        <li><strong>Učebí křivka</strong> - DDD má strmou učebí křivku a může trvat nějakou dobu, než tým získá potřebné znalosti a zkušenosti.</li>
    </ul>

    <h3 id="ddd-vs-other">DDD vs. jiné přístupy</h3>
    <p>
        Domain-Driven Design lze porovnat s jinými přístupy k vývoji softwaru:
    </p>

    <ul>
        <li>
            <strong>DDD vs. Transaction Script</strong> - Transaction Script je jednodušší přístup, který organizuje logiku kolem transakcí nebo případů užití. Je vhodný pro jednodušší aplikace, zatímco DDD je vhodnější pro složitější domény.
        </li>
        <li>
            <strong>DDD vs. CRUD</strong> - CRUD (Create, Read, Update, Delete) je jednoduchý přístup zaměřený na základní operace s daty. DDD jde dále a zaměřuje se na modelování domény a její chování.
        </li>
        <li>
            <strong>DDD vs. Hexagonální architektura</strong> - Hexagonální architektura (Ports and Adapters) se zaměřuje na oddělení domény od infrastruktury. DDD a hexagonální architektura se často kombinují, kde DDD poskytuje přístup k modelování domény a hexagonální architektura poskytuje strukturu pro oddělení domény od infrastruktury.
        </li>
        <li>
            <strong>DDD vs. Mikroservisy</strong> - Mikroservisy jsou architektonický styl, který rozděluje aplikaci do malých, nezávislých služeb. DDD a mikroservisy se často kombinují, kde bounded contexts z DDD mohou být implementovány jako mikroservisy.
        </li>
    </ul>

    <div class="warning-box">
        <h4>Kdy nepoužívat DDD</h4>
        <p>
            DDD nemusí být vhodný pro všechny projekty. Nepoužívejte DDD, pokud:
        </p>
        <ul>
            <li>Vyvíjíte jednoduchou aplikaci s minimální doménovou logikou.</li>
            <li>Nemáte přístup k doménovým expertům.</li>
            <li>Váš tým nemá zkušenosti s DDD a nemá čas se ho naučit.</li>
            <li>Máte velmi omezený čas a rozpočet.</li>
        </ul>
    </div>

    <h3 id="summary">Shrnutí</h3>
    <p>
        Domain-Driven Design je mocný přístup k vývoji softwaru, který se zaměřuje na modelování domény a její implementaci v kódu. Klíčové koncepty DDD zahrnují:
    </p>

    <ul>
        <li><strong>Strategický design</strong> - Bounded Contexts, Context Map, Ubiquitous Language</li>
        <li><strong>Taktický design</strong> - Entity, Value Objects, Aggregates, Repositories, Domain Events, Services</li>
        <li><strong>Implementační vzory</strong> - Factories, Anti-Corruption Layer, Specification, Event Sourcing</li>
    </ul>

    <p>
        DDD je vhodný pro složité aplikace s bohatou doménou, kde je důležité přesně modelovat doménu a její chování. Přináší mnoho výhod, jako je lepší komunikace, flexibilita a modularita, ale má také své výzvy a omezení, které je třeba zvážit před jeho adopcí.
    </p>

    <h3 id="further-reading">Další četba</h3>
    <p>
        Pro další studium Domain-Driven Design doporučujeme následující zdroje:
    </p>

    <ul>
        <li><a href="https://www.domainlanguage.com/ddd/" target="_blank">Domain Language - Oficiální stránky Erica Evanse</a></li>
        <li><a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215" target="_blank">Domain-Driven Design: Tackling Complexity in the Heart of Software - Eric Evans</a></li>
        <li><a href="https://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577" target="_blank">Implementing Domain-Driven Design - Vaughn Vernon</a></li>
        <li><a href="https://www.amazon.com/Domain-Driven-Design-Distilled-Vaughn-Vernon/dp/0134434420" target="_blank">Domain-Driven Design Distilled - Vaughn Vernon</a></li>
        <li><a href="https://dddcommunity.org/" target="_blank">DDD Community</a></li>
    </ul>

    <p>
        V další kapitole se podíváme na <a href="{{ path('horizontal_vs_vertical') }}">rozdíl mezi horizontálním a vertikálním přístupem k DDD</a>.
    </p>
{% endblock %}
