@startuml
skinparam dpi 150
skinparam backgroundColor #FAFAFA
skinparam shadowing false

skinparam defaultFontName "Nunito"
skinparam defaultFontSize 16
skinparam defaultTextAlignment center

skinparam node {
  BackgroundColor #FFFFFF
  BorderColor #005A9C
  BorderThickness 2
}

skinparam component {
  BackgroundColor #FFFFFF
  BorderColor #005A9C
  BorderThickness 2
}

skinparam rectangle {
  BackgroundColor #FFFFFF
  BorderColor #005A9C
  BorderThickness 2
}

skinparam arrowColor #005A9C
skinparam arrowThickness 2

skinparam activity {
  BackgroundColor #FFFFFF
  BorderColor #005A9C
}

skinparam sequence {
  ParticipantBorderColor #005A9C
  LifeLineBorderColor #005A9C
  LifeLineBackgroundColor #E6F0FA
  ParticipantBackgroundColor #FFFFFF
}

skinparam package {
  BackgroundColor #FAFAFA
  BorderColor #005A9C
}

skinparam note {
  BackgroundColor #E6F0FA
  BorderColor #005A9C
}

skinparam title {
  BackgroundColor #FFFFFF
  BorderColor #005A9C
}

' Pro sekvenční diagramy
skinparam sequenceArrowThickness 2
skinparam sequenceArrowColor #005A9C

!define RECTANGLE class
!define COMPONENT component


package "Cart Bounded Context" as Cart {
  package "Domain" as CartDomain {
    package "Model" as CartModel {
      RECTANGLE "Cart" as CartEntity {
        + id(): CartId
        + userId(): string
        + addItem(ProductId, Quantity, Money): void
        + removeItem(ProductId): void
        + items(): array
        + totalAmount(): Money
      }
      
      RECTANGLE "CartItem" as CartItemEntity {
        + productId(): ProductId
        + quantity(): Quantity
        + price(): Money
        + totalPrice(): Money
      }
    }
    
    package "ValueObject" as CartValueObject {
      RECTANGLE "CartId" as CartIdVO
      RECTANGLE "ProductId" as ProductIdVO
      RECTANGLE "Quantity" as QuantityVO
      RECTANGLE "Money" as MoneyVO
    }
    
    package "Event" as CartEvent {
      RECTANGLE "ItemAddedToCart" as ItemAddedToCartEvent
    }
    
    package "Repository" as CartRepository {
      RECTANGLE "CartRepository" as CartRepositoryInterface {
        + findById(CartId): ?Cart
        + save(Cart): void
      }
    }
  }
  
  package "Infrastructure" as CartInfrastructure {
    package "Repository" as CartInfraRepo {
      RECTANGLE "DoctrineCartRepository" as DoctrineCartRepo {
        + findById(CartId): ?Cart
        + save(Cart): void
      }
    }
  }
  
  package "Application" as CartApplication {
    package "Command" as CartCommand {
      RECTANGLE "AddItemToCart" as AddItemToCartCommand {
        + cartId: string
        + productId: string
        + quantity: int
        + price: float
      }
      
      RECTANGLE "AddItemToCartHandler" as AddItemToCartHandler {
        + __invoke(AddItemToCart): void
      }
    }
    
    package "Query" as CartQuery {
      RECTANGLE "GetCart" as GetCartQuery {
        + cartId: string
      }
      
      RECTANGLE "GetCartHandler" as GetCartHandler {
        + __invoke(GetCart): ?CartViewModel
      }
    }
  }
  
  package "Presentation" as CartPresentation {
    package "Controller" as CartController {
      RECTANGLE "CartController" as CartControllerClass {
        + addToCart(Request): Response
      }
      
      RECTANGLE "CheckoutController" as CheckoutController
    }
    
    package "ViewModel" as CartViewModel {
      RECTANGLE "CartViewModel" as CartViewModelClass
    }
  }
}

package "Order Bounded Context" as Order {
  package "Domain" as OrderDomain {
    package "Model" as OrderModel {
      RECTANGLE "Order" as OrderEntity
      RECTANGLE "OrderItem" as OrderItemEntity
    }
    
    package "ValueObject" as OrderValueObject {
      RECTANGLE "OrderId" as OrderIdVO
    }
    
    package "Event" as OrderEvent {
      RECTANGLE "OrderCreated" as OrderCreatedEvent
    }
    
    package "Repository" as OrderRepository {
      RECTANGLE "OrderRepository" as OrderRepositoryInterface
    }
  }
}

package "Shared" as Shared {
  package "Infrastructure" as SharedInfra {
    package "Bus" as SharedBus {
      RECTANGLE "MessengerCommandBus" as CommandBus
      RECTANGLE "MessengerQueryBus" as QueryBus
    }
  }
}

' Vztahy
CartEntity "1" *-- "many" CartItemEntity
CartEntity ..> CartIdVO : uses
CartEntity ..> ItemAddedToCartEvent : publishes
CartItemEntity ..> ProductIdVO : uses
CartItemEntity ..> QuantityVO : uses
CartItemEntity ..> MoneyVO : uses

CartRepositoryInterface <|.. DoctrineCartRepo : implements

AddItemToCartHandler ..> CartRepositoryInterface : uses
AddItemToCartHandler ..> CartEntity : manipulates
AddItemToCartHandler ..> AddItemToCartCommand : handles

GetCartHandler ..> CartRepositoryInterface : uses
GetCartHandler ..> CartViewModelClass : creates
GetCartHandler ..> GetCartQuery : handles

CartControllerClass ..> AddItemToCartCommand : creates
CartControllerClass ..> CommandBus : dispatches
CheckoutController ..> GetCartQuery : creates
CheckoutController ..> QueryBus : dispatches


@enduml