@startuml
skinparam dpi 150
skinparam backgroundColor #FAFAFA
skinparam shadowing false

skinparam defaultFontName "Nunito"
skinparam defaultFontSize 16
skinparam defaultTextAlignment center

skinparam node {
  BackgroundColor #FFFFFF
  BorderColor #005A9C
  BorderThickness 2
}

skinparam component {
  BackgroundColor #FFFFFF
  BorderColor #005A9C
  BorderThickness 2
}

skinparam rectangle {
  BackgroundColor #FFFFFF
  BorderColor #005A9C
  BorderThickness 2
}

skinparam arrowColor #005A9C
skinparam arrowThickness 2

skinparam activity {
  BackgroundColor #FFFFFF
  BorderColor #005A9C
}

skinparam sequence {
  ParticipantBorderColor #005A9C
  LifeLineBorderColor #005A9C
  LifeLineBackgroundColor #E6F0FA
  ParticipantBackgroundColor #FFFFFF
}

skinparam package {
  BackgroundColor #FAFAFA
  BorderColor #005A9C
}

skinparam note {
  BackgroundColor #E6F0FA
  BorderColor #005A9C
}

skinparam title {
  BackgroundColor #FFFFFF
  BorderColor #005A9C
}

' Pro sekvenční diagramy
skinparam sequenceArrowThickness 2
skinparam sequenceArrowColor #005A9C


!define RECTANGLE class
!define COMPONENT component
package "Blog Bounded Context" as Blog {
  package "Domain" as BlogDomain {
    package "Model" as BlogModel {
      RECTANGLE "Post" as PostEntity {
        - id: string
        - title: string
        - content: string
        - author: string
        - createdAt: \DateTimeImmutable
        - updatedAt: ?\DateTimeImmutable
        - events: array
        + id(): PostId
        + title(): string
        + content(): string
        + author(): string
        + updateTitle(string): void
        + updateContent(string): void
        + createdAt(): \DateTimeImmutable
        + updatedAt(): ?\DateTimeImmutable
      }
      
      RECTANGLE "Comment" as CommentEntity {
      }
    }
    
    package "ValueObject" as BlogValueObject {
      RECTANGLE "PostId" as PostIdVO
      RECTANGLE "CommentId" as CommentIdVO
    }
    
    package "Event" as BlogEvent {
      RECTANGLE "PostCreated" as PostCreatedEvent
    }
    
    package "Repository" as BlogRepository {
      RECTANGLE "PostRepository" as PostRepositoryInterface {
        + findById(PostId): ?Post
        + save(Post): void
      }
    }
  }
  
  package "Infrastructure" as BlogInfrastructure {
    package "Repository" as BlogInfraRepo {
      RECTANGLE "DoctrinePostRepository" as DoctrinePostRepo {
        + findById(PostId): ?Post
        + save(Post): void
      }
    }
  }
  
  package "Application" as BlogApplication {
    package "Command" as BlogCommand {
      RECTANGLE "CreatePost" as CreatePostCommand {
        + title: string
        + content: string
        + author: string
      }
      
      RECTANGLE "CreatePostHandler" as CreatePostHandler {
        + __invoke(CreatePost): string
      }
    }
    
    package "Query" as BlogQuery {
      RECTANGLE "GetPost" as GetPostQuery {
        + postId: string
      }
      
      RECTANGLE "GetPostHandler" as GetPostHandler {
        + __invoke(GetPost): ?PostViewModel
      }
      
      RECTANGLE "GetPosts" as GetPostsQuery
      
      RECTANGLE "GetPostsHandler" as GetPostsHandler {
        + __invoke(GetPosts): PostListViewModel
      }
    }
  }
  
  package "Presentation" as BlogPresentation {
    package "Controller" as BlogController {
      RECTANGLE "CreatePostController" as CreatePostController
      RECTANGLE "PostsController" as PostsController
      RECTANGLE "PostController" as PostController
    }
    
    package "ViewModel" as BlogViewModel {
      RECTANGLE "PostViewModel" as PostViewModelClass
      RECTANGLE "PostListViewModel" as PostListViewModelClass
    }
  }
}

package "Shared" as Shared {
  package "Infrastructure" as SharedInfra {
    package "Bus" as SharedBus {
      RECTANGLE "MessengerCommandBus" as CommandBus
      RECTANGLE "MessengerQueryBus" as QueryBus
    }
  }
}

' Vztahy
PostEntity "1" *-- "many" CommentEntity : contains
PostEntity ..> PostIdVO : uses
PostEntity ..> PostCreatedEvent : publishes

PostRepositoryInterface <|.. DoctrinePostRepo : implements

CreatePostHandler ..> PostRepositoryInterface : uses
CreatePostHandler ..> PostEntity : creates
CreatePostHandler ..> CreatePostCommand : handles

GetPostHandler ..> PostRepositoryInterface : uses
GetPostHandler ..> PostViewModelClass : creates
GetPostHandler ..> GetPostQuery : handles

GetPostsHandler ..> PostRepositoryInterface : uses
GetPostsHandler ..> PostListViewModelClass : creates
GetPostsHandler ..> GetPostsQuery : handles

CreatePostController ..> CreatePostCommand : creates
CreatePostController ..> CommandBus : dispatches

PostController ..> GetPostQuery : creates
PostController ..> QueryBus : dispatches

PostsController ..> GetPostsQuery : creates
PostsController ..> QueryBus : dispatches

@enduml